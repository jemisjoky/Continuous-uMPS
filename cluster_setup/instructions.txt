### GETTING SSH SET UP ###

1) Modify the file `config` (in this directory) by replacing YOUR-USERNAME with your Mila login name. This is simply the part before the @mila.quebec in your Mila email address.

2) Check to see if you already have an SSH config file on your computer (it's the file ~/.ssh/config).

3a) If you do, copy the information in the `config` file (in this directory) to the bottom of your existing SSH config file.

3b) If you don't, copy the `config` file into the directory ~/.ssh

4) Run the command `ssh mila` in a terminal. It should ask you to enter a password, which is the same as the password for your Mila email address.

5) If everything goes well, then you should be inside the Mila network. Congrats! You can end the SSH session and go back to your own computer at any time by typing `exit` on the command line.

6) If you don't want to have to enter your password everytime, then follow these (totally optional) steps:

6a) On your own computer, run the command `ssh-keygen -t ed25519 -C "YOUR-EMAIL-ADDRESS"`, where YOUR-EMAIL-ADDRESS can be any preferred email address (not necessarily your Mila one). You'll be asked for a password, and feel free to leave that blank (just press Enter).

6b) Run the command `ssh-copy-id mila` and enter your Mila login password.

6c) Try logging into the Mila system with the command `ssh mila`. You should now be connected, without having to enter your password.


### SETTING UP SOFTWARE DEPENDENCIES ON THE MILA CLUSTER ###

[Note: Much of this is described in https://docs.mila.quebec/software/python.html and https://docs.mila.quebec/slurm/index.html]

7a) To ensure you always have access to Python, add the line `module load python/3.7` into the file `.bashrc` in your home directory (if it isn't already there).

7b) Run the command `source $HOME/.bashrc` to ensure Python is loaded.

8a) Create a new virtual environment by running the command `virtualenv $HOME/.Env` (you can use any name you want in place of ".Env", although having the name start with "." will minimize clutter in your home directory).

8b) Run the command `source $HOME/.Env/bin/activate` to activate your environment. You should see your command line prompt expand to include the prefix "(.Env)". You can deactivate this environment at any time by running the command `deactivate`.

9a) From your home directory, clone a copy of the Continuous-uMPS repo with the command `git clone https://github.com/jemisjoky/Continuous-uMPS.git`.

9b) Assuming your ".Env" virtual environment is still activated, go into the Continuous-uMPS directory and run the command `pip install -r requirements.txt`. This should install all of the necessary packages for running the code.

[Note: It's kinda wasteful to install a whole local copy of Pytorch, since there are already Mila-wide shared versions available. The newest version of Pytorch on the Mila network isn't working correctly though, so for now just use your own local install.]

10a) Go back to your home directory and clone a copy of the TorchMPS repo with the command `git clone https://github.com/jemisjoky/TorchMPS.git`.

10b) Go into the TorchMPS directory and run the command `make install`. This shouldn't install any new external packages (those were taken care of in step 9b), but will make TorchMPS accessible to your training script.


### RUNNING CODE THROUGH SLURM ###

11) Go back to the Continuous-uMPS directory and run the command `sbatch slurm_example`. If everything goes right, the job will run and you should see a file appear in your directory called `job_output.txt`. This just contains the output from running the `try_this_first.py` test script on the Mila cluster, but by modifying `slurm_example` you can have it run more interesting scripts.

12) Let me know if you run into any issues, or have any questions that pop up. Good luck :)
